/* eslint-disable */
// ---------------------------------------------------------
// !!! THIS FILE WAS GENERATED BY GRAPHQL-CODE-GENERATOR !!!
// !!!        DO NOT MODIFY THIS FILE BY YOURSELF        !!!
// ---------------------------------------------------------

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Author = {
  __typename?: 'Author';
  firstName: Scalars['String'];
  id: Scalars['Int'];
  lastName: Scalars['String'];
  posts?: Maybe<Array<Maybe<Post>>>;
};


export type AuthorPostsArgs = {
  findTitle?: InputMaybe<Scalars['String']>;
};

export type Post = {
  __typename?: 'Post';
  author?: Maybe<Author>;
  id: Scalars['Int'];
  /** @deprecated oldField is deprecated. Use newField instead. */
  title: Scalars['String'];
  titleTwo?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  posts?: Maybe<Array<Maybe<Post>>>;
};

export type PostTitlesQueryVariables = Exact<{ [key: string]: never; }>;


export type PostTitlesQuery = { __typename?: 'Query', posts?: Array<{ __typename?: 'Post', title: string } | null> | null };


export const PostTitlesDocument = gql`
    query PostTitles {
  posts {
    title
  }
}
    `;

/**
 * __usePostTitlesQuery__
 *
 * To run a query within a React component, call `usePostTitlesQuery` and pass it any options that fit your needs.
 * When your component renders, `usePostTitlesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostTitlesQuery({
 *   variables: {
 *   },
 * });
 */
export function usePostTitlesQuery(baseOptions?: Apollo.QueryHookOptions<PostTitlesQuery, PostTitlesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<PostTitlesQuery, PostTitlesQueryVariables>(PostTitlesDocument, options);
      }
export function usePostTitlesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostTitlesQuery, PostTitlesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<PostTitlesQuery, PostTitlesQueryVariables>(PostTitlesDocument, options);
        }
export type PostTitlesQueryHookResult = ReturnType<typeof usePostTitlesQuery>;
export type PostTitlesLazyQueryHookResult = ReturnType<typeof usePostTitlesLazyQuery>;
export type PostTitlesQueryResult = Apollo.QueryResult<PostTitlesQuery, PostTitlesQueryVariables>;